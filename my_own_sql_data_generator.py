# -*- coding: utf-8 -*-
"""My Own SQL Data Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mappHg7itFADsFHk-LWT3mq2lz8yCmTL
"""

import pandas as pd
from tqdm import tqdm
from faker import Faker
import random
from datetime import timedelta

fake = Faker() # Initialize Faker

"""Make Enums"""

Species = ["Dog", "Cat", "Other"] # Pet Customer

Status = ["None", "Silver", "Gold"] # Rewards Customer

TicketClass = ["Economy", "Premium", "Business", "FirstClass"] # Ticket Class

IDType = ["ID", "DriversLicence", "Passport"] # Identification

DietaryRestriction = [ 
    "None",
    "Kosher",
    "Vegan",
    "GlutenFree",
    "DairyFree",
    "Diabetes",
    "NutFree",
]

Assistance = ["None", "Wheelchair", "Minor"]

"""Create Counters for Unique items"""

idIncrementingCounter1 = 1 # Customer

customerIDList = [] #customers created

identificationCounter1 = 1876589 # Identification

memberCounter = 43567723 # Rewards Customer

ticketIDIncrementer1 = 100000 # Ticket
ticketIDIncrementer2 = 100000 # for review

flightIDCounter1 = 200000 # Flight
flightIDMin = 200000 # the min created
flightIDMax = 0 # the max created

reviewIDCounter = 500000 # Review

flightCodeList = [] # Flightcodes created

"""Create Data Frame for each table with random values"""


def create_customer_dataframe(num_records):
    """ Create the customer data frame with the desired number of records"""
    global idIncrementingCounter1
    global customerIDList
    data = pd.DataFrame()
    for i in tqdm(range(num_records), desc="Creating Customer DataFrame"):
        data.loc[i, "customerid"] = idIncrementingCounter1
        customerIDList += [idIncrementingCounter1] # Add customer id to list to store for later use (pet and rewards customer)
        idIncrementingCounter1 += 1 # Increment customer id
        data.loc[i, "name"] = fake.name()
    data["customerid"] = data["customerid"].astype(int) # Convert to int 
    return data


def create_flight_info_dataframe(num_records):
    """ Create the flight info data frame with the desired number of records"""
    global flightCodeList
    data = pd.DataFrame()
    for i in tqdm(range(num_records), desc="Creating FlightInfo DataFrame"):
        flightCode = ( # Generate random flight code
            fake.random_letter()
            + fake.random_letter()
            + str(fake.random_number(digits=4))
        )
        while flightCode in flightCodeList: # Make sure flight code is unique
            flightCode = (
                fake.random_letter()
                + fake.random_letter()
                + str(fake.random_number(digits=4))
            )
        data.loc[i, "flightcode"] = flightCode
        flightCodeList += [flightCode] # Add flight code to list to store for later use, (flights)
        data.loc[i, "destination"] = fake.country_code(representation="alpha-3") #3 letter country code
        data.loc[i, "origin"] = fake.country_code(representation="alpha-3") #3 letter country code
        data.loc[i, "departuretime"] = fake.time()
    return data


def create_flight_dataframe(num_records):
    """ Create the flight data frame with the desired number of records"""
    global flightIDCounter1
    global flightIDMax # Set max flight id , makes a range of ids to choose from
    global flightCodeList
    data = pd.DataFrame()
    for i in tqdm(range(num_records), desc="Creating Flight DataFrame"):
        data.loc[i, "departuredate"] = fake.date_this_year(
            before_today=False, after_today=True
        )
        data.loc[i, "flightid"] = flightIDCounter1
        flightIDCounter1 += 1 # Increment flight id for next one
        data.loc[i, "flightcode"] = random.choice(flightCodeList) # Get random flight code from what we created
    data["flightid"] = data["flightid"].astype(int)
    flightIDMax = data.loc[num_records - 1, "flightid"] # Set max flight id, helps with ticket generation
    return data


def create_ticket_dataframe(num_records):
    """ Create the ticket data frame with the desired number of records"""
    seats = {} # Create dictionary to store flight id and seat number, for unique constraint
    global ticketIDIncrementer1

    data = pd.DataFrame()
    for i in tqdm(range(num_records), desc="Creating Ticket DataFrame"):
        
        flightID=random.randint(flightIDMin, flightIDMax) # Get random flight id from the range we made above
        
        seatNumber=seatNumber = str(fake.random_number(digits=2)) + random.choice( # Generate random seat number
            ["A", "B", "C", "D", "E", "F"]
        )
        while seatNumber in seats.get(flightID, []): # Make sure seat number is unique for the flight
            seatNumber = str(fake.random_number(digits=2)) + random.choice(
                ["A", "B", "C", "D", "E", "F"]
            )

        if flightID in seats.keys(): # Add seat number to dictionary for unique constraint
            seats[flightID] += [seatNumber]
        else:
            seats[flightID] = [seatNumber]
 
        data.loc[i, "ticketid"] = ticketIDIncrementer1
        ticketIDIncrementer1 += 1
        data.loc[i, "ticketclass"] = random.choice(list(TicketClass))
        data.loc[i, "seatnumber"] = seatNumber
        data.loc[i, "dietaryrestriction"] = random.choice(list(DietaryRestriction))
        data.loc[i, "luggagenumber"] = fake.random_number(digits=2)
        data.loc[i, "oversizedluggage"] = fake.random_number(digits=1)
        data.loc[i, "customerid"] = random.choice(customerIDList)
        data.loc[i, "flightid"] = flightID
        data.loc[i, "zone"] = random.choice(["A", "B", "C", "D"])
        data.loc[i, "assistance"] = fake.random.choice(list(Assistance))
    data["ticketid"] = data["ticketid"].astype(int)
    data["luggagenumber"] = data["luggagenumber"].astype(int)
    data["oversizedluggage"] = data["oversizedluggage"].astype(int)
    data["customerid"] = data["customerid"].astype(int)
    data["flightid"] = data["flightid"].astype(int)
    return data


def create_pet_customer_dataframe(num_records):
    """ Create the pet customer data frame with the desired number of records"""
    global customerIDList
    data = pd.DataFrame()
    for i in tqdm(range(num_records), desc="Creating PetCustomer DataFrame"):
        data.loc[i, "species"] = random.choice(list(Species))
        data.loc[i, "customerid"] = random.choice(customerIDList)
        customerIDList.remove(data.loc[i, "customerid"]) # Remove customer id from list, keep unique constraint here
    data["customerid"] = data["customerid"].astype(int) # Convert to int
    return data


def create_identification_dataframe(num_records):
    """ Create the identification data frame with the desired number of records"""
    global identificationCounter1
    global customerIDList # Get customer id list from above
    data = pd.DataFrame()
    for i in tqdm(range(num_records), desc="Creating Identification DataFrame"):
        data.loc[i, "category"] = random.choice(list(IDType))
        data.loc[i, "identificationid"] = identificationCounter1
        identificationCounter1 += 1
        data.loc[i, "birthdate"] = fake.date_of_birth(minimum_age=18, maximum_age=90)
        data.loc[i, "issuedate"] = fake.date_this_decade(
            before_today=True, after_today=False
        )
        data.loc[i, "expirationdate"] = fake.date_between_dates(
            date_start=data.loc[i, "issuedate"]+timedelta(days=1), date_end="+5y"
        )
        data.loc[i, "idnumber"] = fake.random_number(digits=6)+1
        data.loc[i, "country"] = fake.country()
        data.loc[i, "customerid"] = random.choice(customerIDList)
    data["identificationid"] = data["identificationid"].astype(int)
    data["idnumber"] = data["idnumber"].astype(int)
    data["customerid"] = data["customerid"].astype(int)
    return data


def create_rewards_customer_dataframe(num_records):
    """ Create the rewards customer data frame with the desired number of records"""
    global memberCounter 
    global customerIDList
    data = pd.DataFrame()
    for i in tqdm(range(num_records), desc="Creating RewardsCustomer DataFrame"):
        data.loc[i, "memberid"] = memberCounter
        memberCounter += 1 # Increment member id
        data.loc[i, "status"] = random.choice(list(Status))
        data.loc[i, "signupdate"] = fake.date_this_decade(
            before_today=True, after_today=False # Get random sign up date that is in the past
        )
        data.loc[i, "milesflown"] = fake.random_number(digits=4)
        data.loc[i, "customerid"] = random.choice(customerIDList)
        customerIDList.remove(data.loc[i, "customerid"])
    data["memberid"] = data["memberid"].astype(int)
    data["milesflown"] = data["milesflown"].astype(int)
    data["customerid"] = data["customerid"].astype(int)
    return data


def create_review_dataframe(num_records):
    """ Create the review data frame with the desired number of records"""
    global ticketIDIncrementer2
    global reviewIDCounter
    data = pd.DataFrame()
    for i in tqdm(range(num_records), desc="Creating Review DataFrame"):
        data.loc[i, "reviewid"] = reviewIDCounter
        reviewIDCounter += 1
        data.loc[i, "rating"] = random.randint(1, 5)
        data.loc[i, "comments"] = fake.text(max_nb_chars=200)
        data.loc[i, "ticketid"] = ticketIDIncrementer2
        ticketIDIncrementer2 += 1 # Increment ticket id for next one
    data["reviewid"] = data["reviewid"].astype(int)
    data["rating"] = data["rating"].astype(int)
    data["ticketid"] = data["ticketid"].astype(int)
    return data


"""Actually create the data frames with the desired number of records"""
# order matters, create the data for the tables in the correct order, so we have no violations of foreign key constraints
create_customer_dataframe(50000).to_csv("Customers.csv", index=False)
create_flight_info_dataframe(100).to_csv("Flight_Info.csv", index=False)
create_flight_dataframe(2000).to_csv("Flights.csv", index=False)
create_ticket_dataframe(200000).to_csv("Tickets.csv", index=False)
create_pet_customer_dataframe(200).to_csv("Pet_Customers.csv", index=False)
create_identification_dataframe(70000).to_csv("Identification.csv", index=False)
create_rewards_customer_dataframe(20000).to_csv("Rewards_Customers.csv", index=False)
create_review_dataframe(3000).to_csv("Reviews.csv", index=False)
